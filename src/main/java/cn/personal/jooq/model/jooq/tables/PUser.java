/*
 * This file is generated by jOOQ.
 */
package cn.personal.jooq.model.jooq.tables;


import cn.personal.jooq.model.jooq.Indexes;
import cn.personal.jooq.model.jooq.Keys;
import cn.personal.jooq.model.jooq.Mydata;
import cn.personal.jooq.model.jooq.tables.records.PUserRecord;
import java.util.Arrays;
import java.util.List;
import javax.annotation.Generated;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PUser extends TableImpl<PUserRecord> {

  private static final long serialVersionUID = 1918466302;

  /**
   * The reference instance of <code>mydata.p_user</code>
   */
  public static final PUser P_USER = new PUser();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<PUserRecord> getRecordType() {
    return PUserRecord.class;
  }

  /**
   * The column <code>mydata.p_user.uid</code>.
   */
  public final TableField<PUserRecord, Integer> UID = createField("uid",
      org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

  /**
   * The column <code>mydata.p_user.username</code>.
   */
  public final TableField<PUserRecord, String> USERNAME = createField("username",
      org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

  /**
   * The column <code>mydata.p_user.password</code>.
   */
  public final TableField<PUserRecord, String> PASSWORD = createField("password",
      org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

  /**
   * The column <code>mydata.p_user.uname</code>.
   */
  public final TableField<PUserRecord, String> UNAME = createField("uname",
      org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

  /**
   * The column <code>mydata.p_user.age</code>.
   */
  public final TableField<PUserRecord, Integer> AGE = createField("age",
      org.jooq.impl.SQLDataType.INTEGER, this, "");

  /**
   * The column <code>mydata.p_user.sex</code>.
   */
  public final TableField<PUserRecord, String> SEX = createField("sex",
      org.jooq.impl.SQLDataType.VARCHAR(8), this, "");

  /**
   * The column <code>mydata.p_user.address</code>.
   */
  public final TableField<PUserRecord, String> ADDRESS = createField("address",
      org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>mydata.p_user.version</code>. 用户状态版本
   */
  public final TableField<PUserRecord, Integer> VERSION = createField("version",
      org.jooq.impl.SQLDataType.INTEGER
          .defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this,
      "用户状态版本");

  /**
   * Create a <code>mydata.p_user</code> table reference
   */
  public PUser() {
    this(DSL.name("p_user"), null);
  }

  /**
   * Create an aliased <code>mydata.p_user</code> table reference
   */
  public PUser(String alias) {
    this(DSL.name(alias), P_USER);
  }

  /**
   * Create an aliased <code>mydata.p_user</code> table reference
   */
  public PUser(Name alias) {
    this(alias, P_USER);
  }

  private PUser(Name alias, Table<PUserRecord> aliased) {
    this(alias, aliased, null);
  }

  private PUser(Name alias, Table<PUserRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> PUser(Table<O> child, ForeignKey<O, PUserRecord> key) {
    super(child, key, P_USER);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Schema getSchema() {
    return Mydata.MYDATA;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.P_USER_PRIMARY);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Identity<PUserRecord, Integer> getIdentity() {
    return Keys.IDENTITY_P_USER;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public UniqueKey<PUserRecord> getPrimaryKey() {
    return Keys.KEY_P_USER_PRIMARY;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<UniqueKey<PUserRecord>> getKeys() {
    return Arrays.<UniqueKey<PUserRecord>>asList(Keys.KEY_P_USER_PRIMARY);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public PUser as(String alias) {
    return new PUser(DSL.name(alias), this);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public PUser as(Name alias) {
    return new PUser(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public PUser rename(String name) {
    return new PUser(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public PUser rename(Name name) {
    return new PUser(name, null);
  }
}

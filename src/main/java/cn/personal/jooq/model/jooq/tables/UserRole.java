/*
 * This file is generated by jOOQ.
 */
package cn.personal.jooq.model.jooq.tables;


import cn.personal.jooq.model.jooq.Indexes;
import cn.personal.jooq.model.jooq.Keys;
import cn.personal.jooq.model.jooq.Mydata;
import cn.personal.jooq.model.jooq.tables.records.UserRoleRecord;
import java.util.Arrays;
import java.util.List;
import javax.annotation.Generated;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UserRole extends TableImpl<UserRoleRecord> {

  private static final long serialVersionUID = 952522680;

  /**
   * The reference instance of <code>mydata.user_role</code>
   */
  public static final UserRole USER_ROLE = new UserRole();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<UserRoleRecord> getRecordType() {
    return UserRoleRecord.class;
  }

  /**
   * The column <code>mydata.user_role.uid</code>.
   */
  public final TableField<UserRoleRecord, Integer> UID = createField("uid",
      org.jooq.impl.SQLDataType.INTEGER, this, "");

  /**
   * The column <code>mydata.user_role.rid</code>.
   */
  public final TableField<UserRoleRecord, Integer> RID = createField("rid",
      org.jooq.impl.SQLDataType.INTEGER, this, "");

  /**
   * Create a <code>mydata.user_role</code> table reference
   */
  public UserRole() {
    this(DSL.name("user_role"), null);
  }

  /**
   * Create an aliased <code>mydata.user_role</code> table reference
   */
  public UserRole(String alias) {
    this(DSL.name(alias), USER_ROLE);
  }

  /**
   * Create an aliased <code>mydata.user_role</code> table reference
   */
  public UserRole(Name alias) {
    this(alias, USER_ROLE);
  }

  private UserRole(Name alias, Table<UserRoleRecord> aliased) {
    this(alias, aliased, null);
  }

  private UserRole(Name alias, Table<UserRoleRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> UserRole(Table<O> child, ForeignKey<O, UserRoleRecord> key) {
    super(child, key, USER_ROLE);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Schema getSchema() {
    return Mydata.MYDATA;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.USER_ROLE_R_FK, Indexes.USER_ROLE_U_FK);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<ForeignKey<UserRoleRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<UserRoleRecord, ?>>asList(Keys.U_FK, Keys.R_FK);
  }

  public PUser pUser() {
    return new PUser(this, Keys.U_FK);
  }

  public Role role() {
    return new Role(this, Keys.R_FK);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public UserRole as(String alias) {
    return new UserRole(DSL.name(alias), this);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public UserRole as(Name alias) {
    return new UserRole(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public UserRole rename(String name) {
    return new UserRole(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public UserRole rename(Name name) {
    return new UserRole(name, null);
  }
}

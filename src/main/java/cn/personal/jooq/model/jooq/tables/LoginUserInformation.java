/*
 * This file is generated by jOOQ.
 */
package cn.personal.jooq.model.jooq.tables;


import cn.personal.jooq.model.jooq.Indexes;
import cn.personal.jooq.model.jooq.Keys;
import cn.personal.jooq.model.jooq.Mydata;
import cn.personal.jooq.model.jooq.tables.records.LoginUserInformationRecord;
import java.util.Arrays;
import java.util.List;
import javax.annotation.Generated;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class LoginUserInformation extends TableImpl<LoginUserInformationRecord> {

  private static final long serialVersionUID = 10430553;

  /**
   * The reference instance of <code>mydata.login_user_information</code>
   */
  public static final LoginUserInformation LOGIN_USER_INFORMATION = new LoginUserInformation();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<LoginUserInformationRecord> getRecordType() {
    return LoginUserInformationRecord.class;
  }

  /**
   * The column <code>mydata.login_user_information.id</code>. 自增主键
   */
  public final TableField<LoginUserInformationRecord, Integer> ID = createField("id",
      org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "自增主键");

  /**
   * The column <code>mydata.login_user_information.user_id</code>. 独立标记
   */
  public final TableField<LoginUserInformationRecord, Long> USER_ID = createField("user_id",
      org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "独立标记");

  /**
   * The column <code>mydata.login_user_information.account</code>. 用户名(登录名)
   */
  public final TableField<LoginUserInformationRecord, String> ACCOUNT = createField("account",
      org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "用户名(登录名)");

  /**
   * The column <code>mydata.login_user_information.password</code>. 密码
   */
  public final TableField<LoginUserInformationRecord, String> PASSWORD = createField("password",
      org.jooq.impl.SQLDataType.VARCHAR(255), this, "密码");

  /**
   * Create a <code>mydata.login_user_information</code> table reference
   */
  public LoginUserInformation() {
    this(DSL.name("login_user_information"), null);
  }

  /**
   * Create an aliased <code>mydata.login_user_information</code> table reference
   */
  public LoginUserInformation(String alias) {
    this(DSL.name(alias), LOGIN_USER_INFORMATION);
  }

  /**
   * Create an aliased <code>mydata.login_user_information</code> table reference
   */
  public LoginUserInformation(Name alias) {
    this(alias, LOGIN_USER_INFORMATION);
  }

  private LoginUserInformation(Name alias, Table<LoginUserInformationRecord> aliased) {
    this(alias, aliased, null);
  }

  private LoginUserInformation(Name alias, Table<LoginUserInformationRecord> aliased,
      Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> LoginUserInformation(Table<O> child,
      ForeignKey<O, LoginUserInformationRecord> key) {
    super(child, key, LOGIN_USER_INFORMATION);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Schema getSchema() {
    return Mydata.MYDATA;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.LOGIN_USER_INFORMATION_PRIMARY);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Identity<LoginUserInformationRecord, Integer> getIdentity() {
    return Keys.IDENTITY_LOGIN_USER_INFORMATION;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public UniqueKey<LoginUserInformationRecord> getPrimaryKey() {
    return Keys.KEY_LOGIN_USER_INFORMATION_PRIMARY;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<UniqueKey<LoginUserInformationRecord>> getKeys() {
    return Arrays.<UniqueKey<LoginUserInformationRecord>>asList(
        Keys.KEY_LOGIN_USER_INFORMATION_PRIMARY);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public LoginUserInformation as(String alias) {
    return new LoginUserInformation(DSL.name(alias), this);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public LoginUserInformation as(Name alias) {
    return new LoginUserInformation(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public LoginUserInformation rename(String name) {
    return new LoginUserInformation(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public LoginUserInformation rename(Name name) {
    return new LoginUserInformation(name, null);
  }
}

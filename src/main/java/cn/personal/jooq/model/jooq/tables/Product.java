/*
 * This file is generated by jOOQ.
 */
package cn.personal.jooq.model.jooq.tables;


import cn.personal.jooq.model.jooq.Mydata;
import cn.personal.jooq.model.jooq.tables.records.ProductRecord;
import javax.annotation.Generated;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Product extends TableImpl<ProductRecord> {

  private static final long serialVersionUID = -1937921212;

  /**
   * The reference instance of <code>mydata.product</code>
   */
  public static final Product PRODUCT = new Product();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ProductRecord> getRecordType() {
    return ProductRecord.class;
  }

  /**
   * The column <code>mydata.product.id</code>. id
   */
  public final TableField<ProductRecord, Long> ID = createField("id",
      org.jooq.impl.SQLDataType.BIGINT, this, "id");

  /**
   * The column <code>mydata.product.productName</code>. 产品名称
   */
  public final TableField<ProductRecord, String> PRODUCTNAME = createField("productName",
      org.jooq.impl.SQLDataType.VARCHAR(255)
          .defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this,
      "产品名称");

  /**
   * The column <code>mydata.product.productContent</code>. 产品内容
   */
  public final TableField<ProductRecord, String> PRODUCTCONTENT = createField("productContent",
      org.jooq.impl.SQLDataType.VARCHAR(255)
          .defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this,
      "产品内容");

  /**
   * The column <code>mydata.product.price</code>. 价格
   */
  public final TableField<ProductRecord, String> PRICE = createField("price",
      org.jooq.impl.SQLDataType.VARCHAR(255), this, "价格");

  /**
   * The column <code>mydata.product.sort</code>. 排序
   */
  public final TableField<ProductRecord, Integer> SORT = createField("sort",
      org.jooq.impl.SQLDataType.INTEGER
          .defaultValue(org.jooq.impl.DSL.inline("9", org.jooq.impl.SQLDataType.INTEGER)), this,
      "排序");

  /**
   * Create a <code>mydata.product</code> table reference
   */
  public Product() {
    this(DSL.name("product"), null);
  }

  /**
   * Create an aliased <code>mydata.product</code> table reference
   */
  public Product(String alias) {
    this(DSL.name(alias), PRODUCT);
  }

  /**
   * Create an aliased <code>mydata.product</code> table reference
   */
  public Product(Name alias) {
    this(alias, PRODUCT);
  }

  private Product(Name alias, Table<ProductRecord> aliased) {
    this(alias, aliased, null);
  }

  private Product(Name alias, Table<ProductRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> Product(Table<O> child, ForeignKey<O, ProductRecord> key) {
    super(child, key, PRODUCT);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Schema getSchema() {
    return Mydata.MYDATA;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Product as(String alias) {
    return new Product(DSL.name(alias), this);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Product as(Name alias) {
    return new Product(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Product rename(String name) {
    return new Product(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Product rename(Name name) {
    return new Product(name, null);
  }
}

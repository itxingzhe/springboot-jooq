/*
 * This file is generated by jOOQ.
 */
package cn.personal.jooq.model.jooq.tables;


import cn.personal.jooq.model.jooq.Indexes;
import cn.personal.jooq.model.jooq.Keys;
import cn.personal.jooq.model.jooq.Mydata;
import cn.personal.jooq.model.jooq.tables.records.DemoInfoRecord;
import java.util.Arrays;
import java.util.List;
import javax.annotation.Generated;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DemoInfo extends TableImpl<DemoInfoRecord> {

  private static final long serialVersionUID = -1954764025;

  /**
   * The reference instance of <code>mydata.demo_info</code>
   */
  public static final DemoInfo DEMO_INFO = new DemoInfo();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<DemoInfoRecord> getRecordType() {
    return DemoInfoRecord.class;
  }

  /**
   * The column <code>mydata.demo_info.id</code>.
   */
  public final TableField<DemoInfoRecord, Long> ID = createField("id",
      org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

  /**
   * The column <code>mydata.demo_info.password</code>.
   */
  public final TableField<DemoInfoRecord, String> PASSWORD = createField("password",
      org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>mydata.demo_info.username</code>.
   */
  public final TableField<DemoInfoRecord, String> USERNAME = createField("username",
      org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

  /**
   * Create a <code>mydata.demo_info</code> table reference
   */
  public DemoInfo() {
    this(DSL.name("demo_info"), null);
  }

  /**
   * Create an aliased <code>mydata.demo_info</code> table reference
   */
  public DemoInfo(String alias) {
    this(DSL.name(alias), DEMO_INFO);
  }

  /**
   * Create an aliased <code>mydata.demo_info</code> table reference
   */
  public DemoInfo(Name alias) {
    this(alias, DEMO_INFO);
  }

  private DemoInfo(Name alias, Table<DemoInfoRecord> aliased) {
    this(alias, aliased, null);
  }

  private DemoInfo(Name alias, Table<DemoInfoRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> DemoInfo(Table<O> child, ForeignKey<O, DemoInfoRecord> key) {
    super(child, key, DEMO_INFO);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Schema getSchema() {
    return Mydata.MYDATA;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.DEMO_INFO_PRIMARY);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public UniqueKey<DemoInfoRecord> getPrimaryKey() {
    return Keys.KEY_DEMO_INFO_PRIMARY;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<UniqueKey<DemoInfoRecord>> getKeys() {
    return Arrays.<UniqueKey<DemoInfoRecord>>asList(Keys.KEY_DEMO_INFO_PRIMARY);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public DemoInfo as(String alias) {
    return new DemoInfo(DSL.name(alias), this);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public DemoInfo as(Name alias) {
    return new DemoInfo(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public DemoInfo rename(String name) {
    return new DemoInfo(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public DemoInfo rename(Name name) {
    return new DemoInfo(name, null);
  }
}

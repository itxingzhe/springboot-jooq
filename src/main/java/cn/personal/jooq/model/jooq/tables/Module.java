/*
 * This file is generated by jOOQ.
 */
package cn.personal.jooq.model.jooq.tables;


import cn.personal.jooq.model.jooq.Indexes;
import cn.personal.jooq.model.jooq.Keys;
import cn.personal.jooq.model.jooq.Mydata;
import cn.personal.jooq.model.jooq.tables.records.ModuleRecord;
import java.util.Arrays;
import java.util.List;
import javax.annotation.Generated;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Module extends TableImpl<ModuleRecord> {

  private static final long serialVersionUID = -595215756;

  /**
   * The reference instance of <code>mydata.module</code>
   */
  public static final Module MODULE = new Module();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ModuleRecord> getRecordType() {
    return ModuleRecord.class;
  }

  /**
   * The column <code>mydata.module.mid</code>.
   */
  public final TableField<ModuleRecord, Integer> MID = createField("mid",
      org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

  /**
   * The column <code>mydata.module.parent_id</code>.
   */
  public final TableField<ModuleRecord, Integer> PARENT_ID = createField("parent_id",
      org.jooq.impl.SQLDataType.INTEGER, this, "");

  /**
   * The column <code>mydata.module.mname</code>.
   */
  public final TableField<ModuleRecord, String> MNAME = createField("mname",
      org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>mydata.module.module_type</code>.
   */
  public final TableField<ModuleRecord, String> MODULE_TYPE = createField("module_type",
      org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

  /**
   * The column <code>mydata.module.is_default</code>.
   */
  public final TableField<ModuleRecord, String> IS_DEFAULT = createField("is_default",
      org.jooq.impl.SQLDataType.VARCHAR(3), this, "");

  /**
   * The column <code>mydata.module.status</code>.
   */
  public final TableField<ModuleRecord, String> STATUS = createField("status",
      org.jooq.impl.SQLDataType.VARCHAR(3), this, "");

  /**
   * The column <code>mydata.module.menu_url</code>.
   */
  public final TableField<ModuleRecord, String> MENU_URL = createField("menu_url",
      org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

  /**
   * The column <code>mydata.module.show_position</code>.
   */
  public final TableField<ModuleRecord, Short> SHOW_POSITION = createField("show_position",
      org.jooq.impl.SQLDataType.SMALLINT, this, "");

  /**
   * Create a <code>mydata.module</code> table reference
   */
  public Module() {
    this(DSL.name("module"), null);
  }

  /**
   * Create an aliased <code>mydata.module</code> table reference
   */
  public Module(String alias) {
    this(DSL.name(alias), MODULE);
  }

  /**
   * Create an aliased <code>mydata.module</code> table reference
   */
  public Module(Name alias) {
    this(alias, MODULE);
  }

  private Module(Name alias, Table<ModuleRecord> aliased) {
    this(alias, aliased, null);
  }

  private Module(Name alias, Table<ModuleRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> Module(Table<O> child, ForeignKey<O, ModuleRecord> key) {
    super(child, key, MODULE);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Schema getSchema() {
    return Mydata.MYDATA;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.MODULE_PRIMARY);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Identity<ModuleRecord, Integer> getIdentity() {
    return Keys.IDENTITY_MODULE;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public UniqueKey<ModuleRecord> getPrimaryKey() {
    return Keys.KEY_MODULE_PRIMARY;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<UniqueKey<ModuleRecord>> getKeys() {
    return Arrays.<UniqueKey<ModuleRecord>>asList(Keys.KEY_MODULE_PRIMARY);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Module as(String alias) {
    return new Module(DSL.name(alias), this);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Module as(Name alias) {
    return new Module(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Module rename(String name) {
    return new Module(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Module rename(Name name) {
    return new Module(name, null);
  }
}
